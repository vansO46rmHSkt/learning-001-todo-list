{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "ALB Template for launching Next.js app by ECS",
  "Parameters": {
    "VPCStackName": {
      "Description": "The name of an existing VPC stack for launching the ECS.",
      "Type": "String",
      "ConstraintDescription": "must be the name of an existing stack name."
    },
    "HostedZoneId": {
      "Description": "Id of Hostedzone.",
      "Type": "String"
    },
    "HostedZoneName": {
      "Description": "Name of Hostedzone.",
      "Type": "String"
    }
  },
  "Resources": {
    "ACMCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": {
          "Ref": "HostedZoneName"
        },
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Ref": "HostedZoneName"
            },
            "HostedZoneId": {
              "Ref": "HostedZoneId"
            }
          }
        ],
        "ValidationMethod": "DNS"
      }
    },
    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "temp-nextjs-test-alb",
        "Scheme": "internet-facing",
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "60"
          }
        ],
        "SecurityGroups": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${VPCStackName}-ELBSecurityGroupId"
            }
          }
        ],
        "Subnets": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${VPCStackName}-PublicSubnet1"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${VPCStackName}-PublicSubnet2"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-alb"
          }
        ]
      }
    },
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "temp-nextjs-test-target-group",
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetType": "ip",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${VPCStackName}-VPC"
          }
        },
        "HealthCheckPath": "/api/health"
      }
    },
    "HTTPlistener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "redirect",
            "RedirectConfig": {
              "Protocol": "HTTPS",
              "Port": 443,
              "Host": "#{host}",
              "Path": "/#{path}",
              "Query": "#{query}",
              "StatusCode": "HTTP_301"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "ApplicationLoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "SslPolicy": "ELBSecurityPolicy-TLS13-1-2-2021-06",
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "ACMCertificate"
            }
          }
        ]
      }
    },
    "RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Ref": "HostedZoneName"
        },
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "ApplicationLoadBalancer",
              "DNSName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "ApplicationLoadBalancer",
              "CanonicalHostedZoneID"
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "TargetGroup": {
      "Value": {
        "Ref": "TargetGroup"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-TargetGroup"
        }
      }
    }
  }
}