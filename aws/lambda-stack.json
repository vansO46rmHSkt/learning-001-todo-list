{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Lambda template to Next.js app",
  "Parameters": {
    "CognitoStackName": {
      "Description": "The name of an existing stack for launching the Lambda.",
      "Type": "String",
      "ConstraintDescription": "must be the name of an existing stack name."
    },
    "ECRStackName": {
      "Description": "The name of an existing stack for launching the Lambda.",
      "Type": "String",
      "ConstraintDescription": "must be the name of an existing stack name."
    },
    "DynamoDBStackName": {
      "Description": "The name of an existing dynamodb stack",
      "Type": "String",
      "ConstraintDescription": "must be the name of an existing stack name."
    },
    "HostedZoneId": {
      "Description": "Id of Hostedzone.",
      "Type": "String"
    },
    "HostedZoneName": {
      "Description": "Name of Hostedzone.",
      "Type": "String"
    }
  },
  "Resources": {
    "IAMRoleForLambda": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "temp-nextjs-test-for-lambda-iam-role",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "AccessToCloudWatch",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "logs:CreateLogGroup",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/temp-nextjs-test-lambda:*"
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "ECRGetImage",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer"
                  ],
                  "Resource": [
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${ECRStackName}-ECRRepositoryArn"
                      }
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "DynamoDBAccessPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:GetItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:ConditionCheckItem"
                  ],
                  "Resource": [
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${DynamoDBStackName}-DynamoDBTableArn"
                      }
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::ImportValue": {
                              "Fn::Sub": "${DynamoDBStackName}-DynamoDBTableArn"
                            }
                          },
                          "/index/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ACMCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": {
          "Ref": "HostedZoneName"
        },
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Ref": "HostedZoneName"
            },
            "HostedZoneId": {
              "Ref": "HostedZoneId"
            }
          }
        ],
        "ValidationMethod": "DNS"
      }
    },
    "Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "temp-nextjs-test-lambda",
        "PackageType": "Image",
        "Code": {
          "ImageUri": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${ECRStackName}-ECRRepositoryUri"
                  }
                },
                ":latest"
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IAMRoleForLambda",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "NEXTAUTH_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HostedZoneName"
                  }
                ]
              ]
            },
            "NEXTAUTH_SECRET": "{{resolve:secretsmanager:/nextauth/secret:SecretString}}",
            "NEXTAUTH_COGNITO_CLIENT_ID": {
              "Fn::ImportValue": {
                "Fn::Sub": "${CognitoStackName}-UserPoolClientId"
              }
            },
            "NEXTAUTH_COGNITO_CLIENT_SECRET": "{{resolve:secretsmanager:/nextauth/cognito/clientSecret:SecretString}}",
            "NEXTAUTH_COGNITO_ISSUER": {
              "Fn::Join": [
                "",
                [
                  "https://cognito-idp.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".amazonaws.com/",
                  {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${CognitoStackName}-UserPoolId"
                    }
                  }
                ]
              ]
            }
          }
        }
      }
    },
    "ApiGateway": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "temp-nextjs-test-api-gateway",
        "ProtocolType": "HTTP",
        "DisableExecuteApiEndpoint": true
      }
    },
    "ApiGatewayDomainName": {
      "Type": "AWS::ApiGatewayV2::DomainName",
      "Properties": {
        "DomainName": {
          "Ref": "HostedZoneName"
        },
        "DomainNameConfigurations": [
          {
            "CertificateArn": {
              "Ref": "ACMCertificate"
            },
            "EndpointType": "REGIONAL"
          }
        ]
      }
    },
    "ApiGatewayStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "AutoDeploy": true,
        "StageName": "$default"
      }
    },
    "ApiGatewayApiMapping": {
      "Type": "AWS::ApiGatewayV2::ApiMapping",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "DomainName": {
          "Ref": "ApiGatewayDomainName"
        },
        "Stage": {
          "Ref": "ApiGatewayStage"
        }
      }
    },
    "ApiGatewayRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "RouteKey": "$default",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "ApiGatewayIntegration"
              }
            ]
          ]
        }
      }
    },
    "ApiGatewayIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "IntegrationMethod": "POST",
        "IntegrationType": "AWS_PROXY",
        "PayloadFormatVersion": "2.0",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "Lambda",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "InvokeLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Lambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::Sub": "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/$default"
        }
      }
    },
    "RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Ref": "HostedZoneName"
        },
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "ApiGatewayDomainName",
              "RegionalDomainName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "ApiGatewayDomainName",
              "RegionalHostedZoneId"
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "ApiEndpoint": {
      "Value": {
        "Fn::GetAtt": [
          "ApiGateway",
          "ApiEndpoint"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ApiEndpoint"
        }
      }
    }
  }
}