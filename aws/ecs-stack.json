{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "ECS template to Next.js app",
  "Parameters": {
    "CognitoStackName": {
      "Description": "The name of an existing base stack for launching the ECS.",
      "Type": "String",
      "ConstraintDescription": "must be the name of an existing stack name."
    },
    "SecretsManagerStackName": {
      "Description": "The name of an existing base stack for launching the ECS.",
      "Type": "String",
      "ConstraintDescription": "must be the name of an existing stack name."
    },
    "ECRStackName": {
      "Description": "The name of an existing base stack for launching the ECS.",
      "Type": "String",
      "ConstraintDescription": "must be the name of an existing stack name."
    },
    "DynamoDBStackName": {
      "Description": "The name of an existing dynamodb stack",
      "Type": "String",
      "ConstraintDescription": "must be the name of an existing stack name."
    },
    "LocalIpAddress": {
      "Description": "Local IP Address",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP adress form x.x.x.x/y ."
    },
    "HostedZoneId": {
      "Description": "Id of Hostedzone.",
      "Type": "String"
    },
    "HostedZoneName": {
      "Description": "Name of Hostedzone.",
      "Type": "String"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/27",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-vpc"
          }
        ]
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.0.0/28",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-public-subnet1"
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.0.16/28",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-public-subnet2"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-internet-gateway"
          }
        ]
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-public-route-table"
          }
        ]
      }
    },
    "VPCEndpointSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SecurityGroup for VPCEndpoint interface",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Fn::GetAtt": [
                "VPC",
                "CidrBlock"
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-vpc-endpoint-security-group"
          }
        ]
      }
    },
    "CloudWatchEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.logs"
        },
        "VpcEndpointType": "Interface",
        "PrivateDnsEnabled": true,
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          }
        ],
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VPCEndpointSecurityGroup",
              "GroupId"
            ]
          }
        ]
      }
    },
    "SecretsManagerEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.secretsmanager"
        },
        "VpcEndpointType": "Interface",
        "PrivateDnsEnabled": true,
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          }
        ],
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VPCEndpointSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Access-to-SecretsManager",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": [
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${SecretsManagerStackName}-NextAuthSecretArn"
                  }
                },
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${SecretsManagerStackName}-CognitoClientSecretArn"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "ECRApiEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.ecr.api"
        },
        "VpcEndpointType": "Interface",
        "PrivateDnsEnabled": true,
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          }
        ],
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VPCEndpointSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Access-to-ECR",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchCheckLayerAvailability"
              ],
              "Resource": {
                "Fn::ImportValue": {
                  "Fn::Sub": "${ECRStackName}-ECRRepositoryArn"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "ecr:GetAuthorizationToken",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "ECRDkrEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.ecr.dkr"
        },
        "VpcEndpointType": "Interface",
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VPCEndpointSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Access-to-ECR",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchCheckLayerAvailability"
              ],
              "Resource": {
                "Fn::ImportValue": {
                  "Fn::Sub": "${ECRStackName}-ECRRepositoryArn"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "ecr:GetAuthorizationToken",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "S3VPCEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.s3"
        },
        "VpcEndpointType": "Gateway",
        "RouteTableIds": [
          {
            "Ref": "PublicRouteTable"
          }
        ]
      }
    },
    "PublicInternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "AllowHTTPSSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "LocalIpAddress"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-elb-security-group"
          }
        ]
      }
    },
    "ECSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "AllowELBSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "3000",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "ELBSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-ecs-security-group"
          }
        ]
      }
    },
    "ACMCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": {
          "Ref": "HostedZoneName"
        },
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Ref": "HostedZoneName"
            },
            "HostedZoneId": {
              "Ref": "HostedZoneId"
            }
          }
        ],
        "ValidationMethod": "DNS"
      }
    },
    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "temp-nextjs-test-alb",
        "Scheme": "internet-facing",
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "60"
          }
        ],
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "ELBSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "temp-nextjs-test-alb"
          }
        ]
      }
    },
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "temp-nextjs-test-target-group",
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetType": "ip",
        "VpcId": {
          "Ref": "VPC"
        },
        "HealthCheckPath": "/api/v1/health"
      }
    },
    "HTTPlistener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "redirect",
            "RedirectConfig": {
              "Protocol": "HTTPS",
              "Port": 443,
              "Host": "#{host}",
              "Path": "/#{path}",
              "Query": "#{query}",
              "StatusCode": "HTTP_301"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "ApplicationLoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "SslPolicy": "ELBSecurityPolicy-TLS13-1-2-2021-06",
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "ACMCertificate"
            }
          }
        ]
      }
    },
    "RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Ref": "HostedZoneName"
        },
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "ApplicationLoadBalancer",
              "DNSName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "ApplicationLoadBalancer",
              "CanonicalHostedZoneID"
            ]
          }
        }
      }
    },
    "IAMRoleForECSTask": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "temp-nextjs-test-for-ecs-task-iam-role",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "DynamoDBAccessPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:GetItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:ConditionCheckItem"
                  ],
                  "Resource": [
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${DynamoDBStackName}-DynamoDBTableArn"
                      }
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::ImportValue": {
                              "Fn::Sub": "${DynamoDBStackName}-DynamoDBTableArn"
                            }
                          },
                          "/index/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "IAMRoleForECSTaskExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "temp-nextjs-test-for-ecs-task-execution-iam-role",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "AccessToCloudWatch",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "SecretsManagerPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource": [
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${SecretsManagerStackName}-NextAuthSecretArn"
                      }
                    },
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${SecretsManagerStackName}-CognitoClientSecretArn"
                      }
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "ECRGetImage",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchCheckLayerAvailability"
                  ],
                  "Resource": [
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${ECRStackName}-ECRRepositoryArn"
                      }
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "ecr:GetAuthorizationToken",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "temp-nextjs-test-cluster",
        "CapacityProviders": [
          "FARGATE",
          "FARGATE_SPOT"
        ],
        "DefaultCapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Weight": 1
          },
          {
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 1
          }
        ]
      }
    },
    "ECSService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": "ApplicationLoadBalancerListener",
      "Properties": {
        "Cluster": {
          "Ref": "ECSCluster"
        },
        "DeploymentController": {
          "Type": "ECS"
        },
        "DeploymentConfiguration": {
          "DeploymentCircuitBreaker": {
            "Enable": true,
            "Rollback": false
          }
        },
        "DesiredCount": 1,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "ECSSecurityGroup",
                  "GroupId"
                ]
              }
            ],
            "Subnets": [
              {
                "Ref": "PublicSubnet1"
              }
            ]
          }
        },
        "PlatformVersion": "LATEST",
        "SchedulingStrategy": "REPLICA",
        "ServiceName": "temp-nextjs-test-service",
        "TaskDefinition": {
          "Ref": "ECSTaskDefinition"
        },
        "HealthCheckGracePeriodSeconds": 60,
        "LoadBalancers": [
          {
            "ContainerName": "temp-nextjs-test-container",
            "ContainerPort": 3000,
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            }
          }
        ]
      }
    },
    "CloudwatchLogsGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "temp-nextjs-test-ecs-cloudwatch-logs-group",
        "RetentionInDays": 7
      }
    },
    "ECSTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "NetworkMode": "awsvpc",
        "Cpu": ".25 vCPU",
        "Memory": 512,
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "IAMRoleForECSTask",
            "Arn"
          ]
        },
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "IAMRoleForECSTaskExecution",
            "Arn"
          ]
        },
        "ContainerDefinitions": [
          {
            "Name": "temp-nextjs-test-container",
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${ECRStackName}-ECRRepositoryUri"
                    }
                  },
                  ":latest"
                ]
              ]
            },
            "Cpu": 256,
            "PortMappings": [
              {
                "ContainerPort": 3000,
                "Protocol": "tcp"
              }
            ],
            "Memory": 512,
            "Essential": true,
            "Secrets": [
              {
                "Name": "NEXTAUTH_SECRET",
                "ValueFrom": {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${SecretsManagerStackName}-NextAuthSecretArn"
                  }
                }
              },
              {
                "Name": "NEXTAUTH_COGNITO_CLIENT_SECRET",
                "ValueFrom": {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${SecretsManagerStackName}-CognitoClientSecretArn"
                  }
                }
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudwatchLogsGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": "ecs"
              }
            },
            "Environment": [
              {
                "Name": "NEXTAUTH_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "https://",
                      {
                        "Ref": "HostedZoneName"
                      }
                    ]
                  ]
                }
              },
              {
                "Name": "NEXTAUTH_COGNITO_CLIENT_ID",
                "Value": {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${CognitoStackName}-UserPoolClientId"
                  }
                }
              },
              {
                "Name": "NEXTAUTH_COGNITO_ISSUER",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "https://cognito-idp.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com/",
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": "${CognitoStackName}-UserPoolId"
                        }
                      }
                    ]
                  ]
                }
              }
            ]
          }
        ]
      }
    }
  }
}